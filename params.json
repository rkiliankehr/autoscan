{"name":"Autoscan","tagline":"This is a small Raspberry Pi project to build a home scanning solution that nicely integrates with the Evernote cloud service.","body":"autoscan\r\n========\r\n\r\nThis is a small Raspberry Pi project to build a home scanning solution that nicely integrates with the Evernote cloud service.\r\n\r\nIt builds upon great project descriptions and blogs from other people and I have tried to make it simple(r) for others to consume that prior art such as\r\n\r\n* http://johannesnews.blogspot.de/2013/02/scan-to-email-with-only-one-buttonpress.html\r\n* http://eduardoluis.com/raspberry-pi-and-usb-network-scanner/\r\n* http://brainofanape.blogspot.de/2012/11/scanning-to-cloud-fujitsu-scansnap.html (not accessible anymore)\r\n\r\nMain differences compared to the others is:\r\n\r\n* make use of the scanner buttons instead of additional GPIO connected buttons;\r\n* scan and then immediately perform the asynchronous post-processing steps such as PDF creation and sending to Evernote;\r\n* increase robustness of the overall solution;\r\n* avoid setting up a full-fledged email system on the raspi.\r\n\r\nThanks for the great prior work of the colleages listed above.\r\n\r\n\r\nInstall necessary packages on a the Pi\r\n--------------------------------------\r\n\r\nOn the Raspberri Pi the following packages must be installed for these scripts to work:\r\n\r\n    $ sudo apt-get install ssmtp sane mailutils scanbuttond imagemagick\r\n\r\n\r\nCheck Scanner\r\n-------------\r\n\r\nConnect your scanner via USB with your Raspi and run\r\n\r\n    $ lsusb\r\n\r\nYou should see something similar as on my Raspi:\r\n\r\n    Bus 001 Device 002: ID 0424:9512 Standard Microsystems Corp. \r\n    Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\r\n    Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. \r\n    Bus 001 Device 005: ID 03f0:1705 Hewlett-Packard ScanJet 5590  \r\n\r\nThe last line shows that the Raspi has found the scanner. In this case it is a HP ScanJet model. \r\n\r\nTest whether it is supported by the Sane driver:\r\n\r\n    $ sudo scanimage -L\r\n    device `hp5590:libusb:001:004' is a HP 5590 Workgroup scanner\r\n\r\nYou should see something similar. If not then you probably have a scanner that is not supported by Sane. Check [Sane Supported Scanners](http://www.sane-project.org/sane-supported-devices.html) to see what could be the issue.\r\n\r\nNow check whether it is working correctly:\r\n\r\n    $ sudo scanimage -A\r\n\r\nIt should show you some specific options your scanner might support in addition to the default values.\r\n\r\nNow perform a test scan:\r\n\r\n    $ sudo scanimage > /tmp/testscan.pnm\r\n\r\nIf everything works well we can go ahead in the configuration.\r\n\r\n\r\nSet up environment\r\n------------------\r\n\r\nThe files in this workspace are expected to reside in `/opt/autoscan`.\r\n\r\n    $ sudo mkdir -p /opt/autoscan\r\n    $ cd /opt\r\n    $ sudo chown pi autoscan\r\n    $ chgrp pi autoscan\r\n    $ git clone git@github.com:rkiliankehr/autoscan.git\r\n\r\nCreate the spool directory needed for the scanning process. Should not be in `/tmp` since in case of a tmpfs setup the space would be simply too small.\r\n\r\n    $ sudo mkdir -p /var/spool/autoscan\r\n    $ sudo chown saned /var/spool/autoscan\r\n\r\n\r\nConfigure scanbuttond\r\n---------------------\r\n\r\nThe file `/etc/default/scanbuttond` must be modified to contain the following configuration:\r\n\r\n    # Set to yes to start scanbuttond\r\n    RUN=yes\r\n    # Set to the user scanbuttond should run as\r\n    RUN_AS_USER=saned\r\n\r\nNext perform the following:\r\n\r\n    $ sudo ln -sf /opt/autoscan/buttonpressed.sh /etc/scanbuttond\r\n\r\n(Re)start the `scanbuttond` daemon:\r\n\r\n    $ sudo /etc/init.d/scanbuttond restart\r\n\r\n\r\nConfigure Email and Evernote\r\n----------------------------\r\n\r\nThe mechanism here creates new Evernote notes via the email method. This is certainly suboptimal and the creation via the Evernote developer API would be much more desirable. However, setting this up for you would also be more complex and that's why I currently stick with the email approach.\r\n\r\nConfigure your personal settings for autoscan:\r\n\r\n    $ cd /opt/autoscan\r\n    $ cp .autoscan-config.sample .autoscan-config\r\n    $ nano .autoscan-config\r\n\r\nNow change the email addresses and parameters to match your specific context. If you don't know the email address of your account then check out your  Account Info section in Evernote.\r\n\r\n\r\nConfigure Scanning Options\r\n--------------------------\r\n\r\nNow you need to configure what autoscan should do when pressing one of the scanner buttons.\r\n\r\nOpen `buttonpressed.sh` and make the necessary modifications that fit your needs. The script should be pretty easy to understand and you should add/modify the relevant parts in the lower part of the script.\r\n\r\nIn the script here you see that three buttons are currently configured as follows:\r\n\r\n* Flatbed scan, single document, grayscale, 300 dpi\r\n* Flatbed scan, single document, colour, 200 dpi\r\n* ADF (feeder) scan, multiple documents, grayscale, 300 dpi\r\n\r\nColour scans with 300 dpi tend to become pretty large and require more processing time (conversion, email send, evernote sync time) they should be used with care. \r\n\r\n\r\nConfigure Postprocessing\r\n------------------------\r\n\r\nCurrently there are two possible postprocessing mechanisms:\r\n\r\n* The first one moves the generated PDFs into a dedicated archives folder and removes all other files.\r\n* The second one just removes all files for all completed jobs.\r\n\r\nThus, jobs which could not be finished will remain such that some later sending could be performed. \r\n\r\nWe use a `cron` job for user `root` for performing the post processing. \r\n\r\n*Option 1*\r\n\r\nCreate the archive directory in case you would like to keep the generated PDF around.\r\n\r\n    # sudo - su\r\n    # mkdir /archive/autoscan\r\n    # ln -sf /opt/autoscan/autoscan-postprocessing /opt/autoscan/autoscan-archive\r\n    # crontab -e\r\n\r\nAdd the following into the crontab file for root:\r\n\r\n    0  *  *  *  *  /opt/autoscan/autoscan-archive\r\n\r\n*Option 2*\r\n\r\nAlternatively you can just remove all files after they have been sent.\r\n\r\n    # sudo - su\r\n    # ln -sf /opt/autoscan/autoscan-postprocessing /opt/autoscan/autoscan-clean\r\n    # crontab -e\r\n\r\nAdd the following into the crontab file for root:\r\n\r\n    0  *  *  *  *  /opt/autoscan/autoscan-clean\r\n\r\n\r\nTodo\r\n----\r\n\r\nLots of things could be improved. Let's see what comes next...\r\n\r\n* Stricter separation of code and configuration.\r\n* Add installation script for dummies.\r\n* Add interactive configuration script.\r\n* ...\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}